/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as indexIndexRouteImport } from './routes/(index)/index'
import { Route as SongViewRouteImport } from './routes/song/view'
import { Route as SongSrcRouteImport } from './routes/song/$src'

const indexIndexRoute = indexIndexRouteImport.update({
  id: '/(index)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SongViewRoute = SongViewRouteImport.update({
  id: '/song/view',
  path: '/song/view',
  getParentRoute: () => rootRouteImport,
} as any)
const SongSrcRoute = SongSrcRouteImport.update({
  id: '/song/$src',
  path: '/song/$src',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/song/$src': typeof SongSrcRoute
  '/song/view': typeof SongViewRoute
  '/': typeof indexIndexRoute
}
export interface FileRoutesByTo {
  '/song/$src': typeof SongSrcRoute
  '/song/view': typeof SongViewRoute
  '/': typeof indexIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/song/$src': typeof SongSrcRoute
  '/song/view': typeof SongViewRoute
  '/(index)/': typeof indexIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/song/$src' | '/song/view' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/song/$src' | '/song/view' | '/'
  id: '__root__' | '/song/$src' | '/song/view' | '/(index)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  SongSrcRoute: typeof SongSrcRoute
  SongViewRoute: typeof SongViewRoute
  indexIndexRoute: typeof indexIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(index)/': {
      id: '/(index)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/song/view': {
      id: '/song/view'
      path: '/song/view'
      fullPath: '/song/view'
      preLoaderRoute: typeof SongViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/song/$src': {
      id: '/song/$src'
      path: '/song/$src'
      fullPath: '/song/$src'
      preLoaderRoute: typeof SongSrcRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  SongSrcRoute: SongSrcRoute,
  SongViewRoute: SongViewRoute,
  indexIndexRoute: indexIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
